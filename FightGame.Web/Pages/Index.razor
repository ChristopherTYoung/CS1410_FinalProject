@page "/"

<PageTitle>FightGame</PageTitle>

<p>Welcome to Fight Game.</p>
<p>First, pick your username. If the username you entered already exists, then it will start you at your last saved
    game. Select a class if this is your first time playing. The classes to choose from are Archer, Assassin,
    Executioner, Knight, Mage, Samurai, Summoner, and the Warrior</p>
<p>Name</p><input @bind="UserInputName" />
<p>Class</p><input @bind="UserInputClassType" /><button type="reset" @onclick="CreateCharacter">Submit</button>
<hr>
@if (CreatedCharacter)
{
    if (File.Exists($"../Players/{UserInputName}.csv") && UserInputClassType != "")
    {
        <p>You already have character with that username saved. No need to select a new class</p>
    }
    if (File.Exists($"../Players/{UserInputName}.csv"))
    {
        <p>@player.ToString()</p>
    }
    else
    {
        <p>@player.ToString()</p>
    }
}
@if (errorMessage != "")
{
    <p class="text-danger">@errorMessage</p>
}
@if (DisplayMenu)
{
    <button type="button" @onclick="PlayGame">Play</button>
    <button type="button" @onclick="QuitGame">Quit</button>
}
@if (roundIsStillGoing)
{
    <p>You are facing @enemy.Name</p>
    <p>Your Health: @PlayerHealth Enemy Health: @EnemyHealth</p>
    <p>Choose an attack</p>
    <button type="button" @onclick="@(() => TakeTurn("Dodge", player))">Dodge</button>
    <button type="button" @onclick="@(() => TakeTurn("Normal", player))">Normal</button>
    <button type="button" @onclick="@(() => TakeTurn("Special", player))">Special</button>
    <button type="button" @onclick="@(() => TakeTurn("Ultimate", player))">Ultimate</button>
    if (EnemyHealth <= 0)
    {
        <p>Player has won!</p>

    }
    else if (PlayerHealth <= 0)
    {
        <p>Game over!</p>
    }
}
@if (playerWins && roundIsOver)
{
    <p>Player has won!</p>
}
@if (UserInShop)
{
    <p>Welcome to the Shop</p>
    <p>We have quite a selection for you to choose from.</p>
    <p>We have HealthBoost, AttackBoost, DodgeMoves, SpecialAttack and UltimateAttack</p>
    <p>@($"You have {this.player.Money} gold")</p>
    <p>What would you like to buy?</p>
    <button type="button" @onclick="@(() => BuyItem("DodgeMoves"))">DodgeMoves</button>
    <button type="button" @onclick="@(() => BuyItem("SpecialAttack"))">SpecialAttack</button>
    <button type="button" @onclick="@(() => BuyItem("UltimateAttack"))">UltimateAttack</button>
    <button type="button" @onclick="@(() => BuyItem("AttackBoost"))">AttackBoost</button>
    <button type="button" @onclick="@(() => BuyItem("HealthBoost"))">HealthBoost</button>
    <button type="button" @onclick="PlayGame">Continue</button>
    <button type="button" @onclick="QuitGame">Quit</button>
}
else if (playerWins == false && roundIsOver)
{
    <p>Game over!</p>
    <button type="reset" @onclick="PlayGame">Play</button>
    <button type="reset" @onclick="QuitGame">Quit</button>
}


@code {
    IPlayer player = new Player();
    IInventory inventory = new Inventory();
    Game game = new Game();
    PlayerFileService file = new PlayerFileService();
    private Enemy enemy { get; set; }
    private string userInputName = "";
    private string UserInputName
    {
        get => userInputName;
        set
        {
            userInputName = value;
        }
    }
    private string userInputClassType = "";
    private string UserInputClassType
    {
        get => userInputClassType;
        set
        {
            userInputClassType = value;
        }
    }
    private bool CreatedCharacter { get; set; } = false;
    private bool GameIsStillGoing { get; set; } = false;
    private string errorMessage { get; set; } = "";
    private bool DisplayMenu { get; set; } = false;
    private int EnemyHealth { get; set; }
    private bool UserInShop { get; set; } = false;
    private int PlayerHealth { get; set; }
    private bool roundIsStillGoing { get; set; } = false;
    private bool playerWins { get; set; } = false;
    private bool PlayersTurn { get; set; } = false;
    private bool roundIsOver { get; set; } = false;
    private void CreateCharacter()
    {
        errorMessage = "";
        if (File.Exists($"../Players/{UserInputName}.csv"))
        {
            GameIsStillGoing = true;
            player = file.ReadPlayerSavedData(UserInputName);
            inventory = PlayerFileService.ReadInventorySavedData(UserInputName);
        }
        else
        {
            try
            {
                player = Game.SelectClass(UserInputClassType, UserInputName);
                GameIsStillGoing = true;
            }
            catch (Exception)
            {
                CreatedCharacter = false;
                errorMessage = "Not a valid class";
                DisplayMenu = false;
            }
        }
        CreatedCharacter = true;
        Menu();
    }

    private void Menu()
    {
        DisplayMenu = true;
    }

    private void PlayGame()
    {
        roundIsOver = false;
        DisplayMenu = false;
        UserInShop = false;
        enemy = Enemy.GetEnemy();
        roundIsStillGoing = true;
        EnemyHealth = enemy.Health;
        PlayerHealth = player.Health;
    }

    private void QuitGame()
    {
        file.WritePlayerSavedData(player);
        PlayerFileService.WriteInventorySavedData(player.Name, inventory);
        file.WritePlayerScoresToFile(player);
        CreatedCharacter = false;
        UserInShop = false;
        roundIsOver = false;
        DisplayMenu = false;
    }

    private void TakeTurn(string move, IPlayer player)
    {
        errorMessage = "";
        Game game = new Game();
        try
        {
            var damage = Game.PlayerTurn(player, enemy, move, new List<string>() { }, inventory);
            EnemyHealth -= damage;
        }
        catch (Exception)
        {
            errorMessage = $"You don't have any more {move}'s";
        }
        if (move != "Dodge")
        {
            var enemydamage = Game.EnemyAttack(player, enemy);
            PlayerHealth -= enemydamage;
        }
        if (EnemyHealth <= 0)
        {
            player.Money = player.Money + 5;
            playerWins = true;
            roundIsOver = true;
            roundIsStillGoing = false;
            OpenShop();
        }
        else if (PlayerHealth <= 0)
        {
            roundIsOver = true;
            playerWins = false;
            @* Game.SelectClass(move, player.Name); *@
            roundIsStillGoing = false;
        }
    }

    private void OpenShop()
    {
        roundIsStillGoing = false;
        UserInShop = true;
    }

    private List<string> BuyItem(string input)
    {
        List<string> ItemsBought = new List<string>();
        if (input == "Attack Boost" && player.Money >= 10)
        {
            player.Money -= 10;
            ItemsBought.Add("AttackBoost");
        }

        if (input == "HealthBoost" && player.Money >= 10)
        {
            player.Money -= 10;
            ItemsBought.Add("Health Boost");
        }
        if (input == "DodgeMoves" && player.Money >= 5)
        {
            player.Money -= 5;
            inventory.Dodges++;
        }
        if (input == "UltimateAttack" && player.Money >= 5)
        {
            player.Money -= 5;
            inventory.UltimateAttacks++;
        }
        if (input == "SpecialAttack" && player.Money >= 5)
        {
            player.Money -= 5;
            inventory.SpecialAttacks++;
        }

        if (player.Money == 0)
        {
            PlayGame();
        }

        return ItemsBought;
    }
}
