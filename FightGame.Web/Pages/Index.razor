@page "/"

<PageTitle>FightGame</PageTitle>

<p>Welcome to Fight Game.</p>
<p>First, pick your username. If the username you entered already exists, then it will start you at your last saved
    game. Select a class if this is your first time playing. The classes to choose from are Archer, Assassin,
    Executioner, Knight, Mage, Samurai, Summoner, and the Warrior</p>
<p>Name</p><input @bind="UserInputName" />
<p>Class</p><input @bind="UserInputClassType" /><button type="reset" @onclick="CreateCharacter">Submit</button>
<hr>
@if (CreatedCharacter)
{
    if (File.Exists($"../Players/{UserInputName}.csv") && UserInputClassType != "")
    {
        <p>You already have character with that username saved. No need to select a new class</p>
    }
    if (File.Exists($"../Players/{UserInputName}.csv"))
    {
        <p>@player.ToString()</p>
    }
    else
    {
        <p>@player.ToString()</p>
    }
}
@if (errorMessage != "")
{
    <p class="text-danger">@errorMessage</p>
}
@if (DisplayMenu)
{
    <button type="button" @onclick="PlayGame">Play</button>
    <button type="button" @onclick="QuitGame">Quit</button>
}
@if (roundIsStillGoing)
{
    <p>You are facing @enemy.Name</p>
    <p>Your Health: @PlayerHealth Enemy Health: @EnemyHealth</p>
    <p>Choose an attack</p>
    <button type="button" @onclick="@(() => TakeTurn("Dodge", player))">Dodge</button>
    <button type="button" @onclick="@(() => TakeTurn("Heal", player))">Heal</button>
    <button type="button" @onclick="@(() => TakeTurn("Normal", player))">Normal</button>
    <button type="button" @onclick="@(() => TakeTurn("Special", player))">Special</button>
    <button type="button" @onclick="@(() => TakeTurn("Ultimate", player))">Ultimate</button>
    if (enemy.Health <= 0)
    {
        <p>Player has won!</p>
    }
    else if (player.Health <= 0)
    {
        <p>Game over!</p>
    }
}

@code {
    IPlayer player = new Player();
    Game game = new Game();
    PlayerFileService file = new PlayerFileService();
    private Enemy enemy { get; set; }
    private string userInputName = "";
    private string UserInputName
    {
        get => userInputName;
        set
        {
            userInputName = value;
        }
    }
    private string userInputClassType = "";
    private string UserInputClassType
    {
        get => userInputClassType;
        set
        {
            userInputClassType = value;
        }
    }
    private bool CreatedCharacter { get; set; } = false;
    private bool GameIsStillGoing { get; set; } = false;
    private string errorMessage { get; set; } = "";
    private bool DisplayMenu { get; set; } = false;

    private void CreateCharacter()
    {
        errorMessage = "";
        if (File.Exists($"../Players/{UserInputName}.csv"))
        {
            GameIsStillGoing = true;
            player = file.ReadPlayerSavedData(UserInputName);
        }
        else
        {
            try
            {
                player = Game.SelectClass(UserInputClassType, UserInputName);
                GameIsStillGoing = true;
            }
            catch (Exception)
            {
                CreatedCharacter = false;
                errorMessage = "Not a valid class";
            }
        }
        CreatedCharacter = true;
        Menu();
    }
    private void Menu()
    {
        DisplayMenu = true;
    }
    private void PlayGame()
    {
        DisplayMenu = false;
        enemy = Enemy.GetEnemy();
        roundIsStillGoing = true;
        EnemyHealth = enemy.Health;
        PlayerHealth = player.Health;
    }
    private void QuitGame()
    {
        file.WritePlayerSavedData(player);
        CreatedCharacter = false;
    }
    private int EnemyHealth { get; set; }
    private int PlayerHealth { get; set; }
    private bool roundIsStillGoing { get; set; } = false;
    private bool playerWins { get; set; } = false;

    private bool PlayersTurn { get; set; } = false;
    private void TakeTurn(string move, IPlayer player)
    {
        Game game = new Game();
        try
        {
            var damage = Game.PlayerTurn(player, enemy, move, new List<string>() { });
            EnemyHealth -= damage;
        }
        catch(Exception)
        {
            errorMessage = $"You don't have any more {move}'s";
        }
        var enemydamage = Game.EnemyAttack(player, enemy);
        PlayerHealth -= enemydamage;
        if (EnemyHealth <= 0)
        {
            player.Money = player.Money + 5;
            playerWins = true;
            roundIsStillGoing = false;
            Game.Shop(player.Money);
        }
        else if (PlayerHealth <= 0)
        {
            playerWins = false;
            @* Game.SelectClass(move, player.Name); *@
            roundIsStillGoing = false;
        }
    }
}

@* public static void Round(IPlayer player)
    {
    Game game = new Game();
    System.Console.WriteLine(player.Name);

    var enemy = Enemy.GetEnemy();

    var enemyHealth = enemy.Health;
    var playerHealth = player.Health;
    var roundIsStillGoing = true;
    var playerWins = true;

    System.Console.WriteLine($"You are fighting {enemy.Name}");

    while (roundIsStillGoing)
    {
    System.Console.WriteLine("Make your move (Dodge, Heal, Normal, Special, Ultimate");
    var input = Console.ReadLine();
    var damage = PlayerTurn(player, enemy, input);
    System.Console.WriteLine(damage);
    enemyHealth -= damage;
    System.Console.WriteLine($"Player Health: {playerHealth} | Enemy Health: {enemyHealth}");

    if (enemyHealth <= 0)
    {
    Player.Money = Player.Money + 5;
    playerWins = true;
    roundIsStillGoing = false;
    Shop(Player.Money);
    }

    var enemydamage = EnemyAttack(player, enemy);
    System.Console.WriteLine(enemydamage);
    playerHealth -= enemydamage;
    System.Console.WriteLine($"Player Health: {playerHealth} | Enemy Health: {enemyHealth}");
    if (playerHealth <= 0)
    {

    playerWins = false;
    roundIsStillGoing = false;
    }
    }
    if (playerWins)
    {
    System.Console.WriteLine("Player won");
    }
    else if (playerWins == false)
    {
    "Game Over".PrintEachLetter();
    "Select a class".PrintEachLetter();
    var input = Console.ReadLine();

    SelectClass(input!, player.Name);
    }
    } *@