@page "/"

<PageTitle>FightGame</PageTitle>

<p>Welcome to Fight Game.</p>
<p>First, pick your username. If the username you entered already exists, then it will start you at your last saved
    game. Select a class if this is your first time playing. The classes to choose from are Archer, Assassin,
    Executioner, Knight, Mage, Samurai, Summoner, and the Warrior</p>
<p>Name</p><input @bind="UserInputName" />
<p>Class</p><input @bind="UserInputClassType" /><button type="reset" @onclick="CreateCharacter">Submit</button>
<hr>
@if (CreatedCharacter)
{
    if (File.Exists($"../Players/{UserInputName}.csv") && UserInputClassType != "")
    {
        <p>You already have character with that username saved. No need to select a new class</p>
    }
    if (File.Exists($"../Players/{UserInputName}.csv"))
    {
        <p>@player.ToString()</p>
    }
    else
    {
        <p>@player.ToString()</p>
    }
}
@if (errorMessage != "")
{
    <p class="text-danger">@errorMessage</p>
}
@if (DisplayMenu)
{
    <button type="button" @onclick="PlayGame">Play</button>
    <button type="button" @onclick="QuitGame">Quit</button>
}
@if (roundIsStillGoing)
{
    <p>You are facing @enemy.Name</p>
    <p>Your Health: @PlayerHealth Enemy Health: @EnemyHealth</p>
    <p>Choose an attack</p>
    <button type="button" @onclick="@(() => TakeTurn("Dodge", player))">Dodge</button>
    <button type="button" @onclick="@(() => TakeTurn("Normal", player))">Normal</button>
    <button type="button" @onclick="@(() => TakeTurn("Special", player))">Special</button>
    <button type="button" @onclick="@(() => TakeTurn("Ultimate", player))">Ultimate</button>
    if (EnemyHealth <= 0)
    {
        <p>Player has won!</p>
    }
    else if (PlayerHealth <= 0)
    {
        <p>Game over!</p>
    }
}
@if (EnemyHealth <= 0)
{
    <p>Player has won!</p>
    <p>Welcome to the Shop</p>
    <p>We have quite a selection for you to choose from.</p>
    <p>We have HealthBoost, AttackBoost, DodgeMoves, SpecialAttack and UltimateAttack</p>
    <p>@($"You have {this.player.Money} gold")</p>
    <p>What would you like to buy?</p>
    <button type="button">DodgeMoves</button>
    <button type="button">SpecialAttack</button>
    <button type="button">UltimateAttack</button>
    <button type="button">AttackBoost</button>
    <button type="button">HealthBoost</button>
    <button type="button">Nothing</button>
}
else if (PlayerHealth <= 0)
{
    <p>Game over!</p>
    <button type="button" @onclick="PlayGame">Play</button>
    <button type="button" @onclick="QuitGame">Quit</button>
}


@code {
    IPlayer player = new Player();
    Game game = new Game();
    PlayerFileService file = new PlayerFileService();
    private Enemy enemy { get; set; }
    private string userInputName = "";
    private string UserInputName
    {
        get => userInputName;
        set
        {
            userInputName = value;
        }
    }
    private string userInputClassType = "";
    private string UserInputClassType
    {
        get => userInputClassType;
        set
        {
            userInputClassType = value;
        }
    }
    private bool CreatedCharacter { get; set; } = false;
    private bool GameIsStillGoing { get; set; } = false;
    private string errorMessage { get; set; } = "";
    private bool DisplayMenu { get; set; } = false;
    private int EnemyHealth { get; set; }
    private int PlayerHealth { get; set; }
    private bool roundIsStillGoing { get; set; } = false;
    private bool playerWins { get; set; } = false;
    private bool PlayersTurn { get; set; } = false;
    private void CreateCharacter()
    {
        errorMessage = "";
        if (File.Exists($"../Players/{UserInputName}.csv"))
        {
            GameIsStillGoing = true;
            player = file.ReadPlayerSavedData(UserInputName);
        }
        else
        {
            try
            {
                player = Game.SelectClass(UserInputClassType, UserInputName);
                GameIsStillGoing = true;
            }
            catch (Exception)
            {
                CreatedCharacter = false;
                errorMessage = "Not a valid class";
            }
        }
        CreatedCharacter = true;
        Menu();
    }
    private void Menu()
    {
        DisplayMenu = true;
    }
    private void PlayGame()
    {
        DisplayMenu = false;
        enemy = Enemy.GetEnemy();
        roundIsStillGoing = true;
        EnemyHealth = enemy.Health;
        PlayerHealth = player.Health;
    }
    private void QuitGame()
    {
        file.WritePlayerSavedData(player);
        CreatedCharacter = false;
    }

    private void TakeTurn(string move, IPlayer player)
    {
        Game game = new Game();
        try
        {
            var damage = Game.PlayerTurn(player, enemy, move, new List<string>() { });
            EnemyHealth -= damage;
        }
        catch (Exception)
        {
            errorMessage = $"You don't have any more {move}'s";
        }
        var enemydamage = Game.EnemyAttack(player, enemy);
        PlayerHealth -= enemydamage;
        if (EnemyHealth <= 0)
        {
            player.Money = player.Money + 5;
            playerWins = true;
            roundIsStillGoing = false;
        }
        else if (PlayerHealth <= 0)
        {
            playerWins = false;
            @* Game.SelectClass(move, player.Name); *@
            roundIsStillGoing = false;
        }
    }

    @* public static List<string> Shop(int Gold)
        {
        "Welcome to the Shop".PrintEachLetter();
        "We have quite a selection for you to choose from".PrintEachLetter();
        "We have health and dodge potions, you can also upgrade your abilities".PrintEachLetter();
        "What would you like to buy".PrintEachLetter();
        List<string> ItemsBought = new List<string>();
        var input = Console.ReadLine();
        if (input == "Attack Boost" && Gold >= 10)
        {
        Gold -= 10;
        ItemsBought.Add("AttackBoost");
        }

        if (input == "HealthBoost")
        {
        Gold -= 5;
        ItemsBought.Add("Health Boost");
        }
        if (input == "DodgeMoves")
        {
        Gold -= 5;
        Inventory.Dodges++;
        }
        if (input == "UltimateAttack")
        {
        Gold -= 5;
        Inventory.UltimateAttacks ++ ;
        }
        if (input == "SpecialAttack")
        {
        Gold -= 5;
        Inventory.SpecialAttacks ++ ;
        }
        if (input == "Nothing")
        {
        return ItemsBought;
        }
        //Make items a base value. Enemy will drop 10 gold each. After each encounter of the shop both enemy gold and Shop
        prices increase by 1/4 their original.
        //Potions will be 10 gold each (base value), upgrades will be (20 base value)

        return ItemsBought;
        } *@

}

